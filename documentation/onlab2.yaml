---
swagger: '2.0'


info:
  version: v1
  title: TestManagement Studio Backend API
  description: |
    <<Some text >>

    
    Would respond with:
    ```js
    callbackFunction({
        ...
    });
    ```

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
host: localhost
basePath: /v1
schemes:
  - http
  - https
consumes:
  - application/x-www-form-urlencoded  
  - application/json
produces:
  - application/json
################################################################################
#                                  Security                                    #
################################################################################
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - Bearer: []

################################################################################
#                                   Parameters                                 #
################################################################################
parameters:
  userId:
    name: userId
    in: path
    description: The user identifier number
    type: number
    format: int32
    required: true
################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  ErrorMessage:
    type: object
    properties:
      title:
        type: string
      text:
        type: string
        
  Entity:
    type: object
    properties:
      id:
        type: integer
        format: int32
      permissions:
          type: array
          items:
            $ref: '#/definitions/Permission'
  Role:
    type: object
    properties:
      isRoot:
        description: "If this property set to true, user has access to any part of the services"
        type: boolean
      actorAccess:
        type: integer
        format: int32
      categoryAccess:
        type: integer
        format: int32
        
  Actor:
    type: object
    description: "Anyone who can does actions. (Users & Groups)"
    allOf:
    - $ref: '#/definitions/Entity'
    - type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/definitions/Role'
        testSets:
          description: "Tests to to be completed, assigned to the actor"
          type: array
          items:
            $ref: '#/definitions/TestSet'

  Permission:
    type: object
    properties:
      read:
        type: boolean
      write:
        type: boolean
      subject:
        $ref: '#/definitions/Actor'
      object:
        $ref: '#/definitions/Entity'
      objectType:
        description: "Discriminator to the actors. Group | user"
        type: string
        
  User:
    type: object
    allOf:
    - $ref: '#/definitions/Actor'
    - type: object
      properties:
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        groups:
          description: "Groups which are created by the user"
          type: array
          items:
            $ref: '#/definitions/Group'
        memberOf:
          type: array
          items:
            $ref: '#/definitions/Group'
        tests:
          description: "Tests created by the user"
          type: array
          items:
            $ref: '#/definitions/Test'

        testExecutions:
          description: "Tests are completed by the user"
          type: array
          items:
            $ref: '#/definitions/TestExecution'
            
  Group:
    type: object
    allOf:
    - $ref: '#/definitions/Actor'
    - type: object
      properties:
        name:
          type: string
        isPrivate:
          description: "The group visible for only the creator."
          type: boolean
        creator:
          description: "The user who creeated the group."
          $ref: '#/definitions/User'
        members:
          description: "Users who are member of this group."
          type: array
          items:
            $ref: '#/definitions/User'
  
  Category:
    type: object
    allOf:
    - $ref: '#/definitions/Entity'
    - type: object
      properties:
        name:
          type: string
        parent:
          $ref: '#/definitions/Category'
        childrens:
          type: array
          items:
            $ref: '#/definitions/Category'
        questions:
          type: array
          items:
            $ref: '#/definitions/Question'
        tests:
          type: array
          items:
            $ref: '#/definitions/Test'
  Answer:
    type: object
    allOf:
    - $ref: '#/definitions/Entity'
    - type: object
      properties:
        text:
          type: string
        correct:
          type: boolean
          
  Question:
    type: object
    allOf:
    - $ref: '#/definitions/Entity'
    - type: object
      properties:
        text:
          type: string
        answersAll:
          type: array
          items:
            $ref: '#/definitions/Answer'
        categories:
          type: array
          items:
            $ref: '#/definitions/Category'

  SingleAnswerQuestion:
    type: object
    allOf:
    - $ref: '#/definitions/Question'
    - type: object
      properties:
        text:
          type: string  
 
        
  Test:
    type: object
    allOf:
    - $ref: '#/definitions/Entity'
    - type: object
      properties:
        text:
          type: string
        questions:
          type: array
          items:
            $ref: '#/definitions/Question'
        owner:
          $ref: '#/definitions/User'

  TestSet:
    type: object
    allOf:
    - $ref: '#/definitions/Entity'
    - type: object
      properties:
        test:
          $ref: '#/definitions/Test'
        dueDate:
          type: string
          format: date-time
        actorsAssigned:
          type: array
          items:
            $ref: '#/definitions/Actor'
        
  TestExecution:
    type: object
    allOf:
    - $ref: '#/definitions/Entity'
    - type: object
      properties:
        test:
          $ref: '#/definitions/Test'
        answersGiven:
          type: array
          items:
            $ref: '#/definitions/Answer'
        dateOfStart:
          type: string
          format: date-time
        dateOfFill:
          type: string
          format: date-time
            
################################################################################
#                                           Paths                              #
################################################################################
paths:

  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      description: ""
      operationId: login
      produces:
        - application/json  
      parameters:
        - in: formData
          name: username
          description: The user name for login
          required: false
          type: string
        - in: formData
          name: password
          description: The passwor√≥d for login in clear text
          required: false
          type: string
          format: password
      responses:
        "201":
          description: Successful operation. Return a JWT token
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
          schema:
            $ref: "#/definitions/ErrorMessage" 
        "401":
          description: Wrong username/password supplied
          schema:
            $ref: "#/definitions/ErrorMessage"
          
  /auth/logout:
    delete:
      security:
        - Bearer: []
      tags:
        - Auth
      summary: Invalidate the token of currently logged in user
      description: ""
      operationId: logout
      produces:
        - application/json        
      responses:
        "204":
          description: Successful operation 


  /users:
  
    get:
      tags:
      - Users
      description: Get all registered users
      operationId: listUsers
      responses:
        "200":
          description: The list of user objects
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags:
      - Users
      description: Register a new user
      operationId: addUser
      consumes:
        - multipart/form-data
      parameters:
        - name: email
          in: formData
          description: The users's email
          required: true
          type: string
        - name: password
          in: formData
          description: The users's password
          required: true
          type: string
          format: password
        - name: firstName
          in: formData
          description: The users's firstname
          required: false
          type: string
        - name: lastName
          in: formData
          description: The users's lastname
          required: false
          type: string 
      responses:
        "201":
          description: Return no content, but a redirection  header
          schema:
            type: string
          headers:
            Location:
              description: The URI of the created user
              type: string
        "409":
          description: Some unique data (i.e. email address) conflicted with a data of existing user
          schema:
            $ref: "#/definitions/ErrorMessage"
          
  /users/me:
    get:
      security:
        - Bearer: []
      tags:
        - Users
      summary: Get the actual user
      description: ""
      operationId: getActualUser
      produces:
        - application/json        
      responses:
        "200":
          description: The user object
          schema:
            $ref: "#/definitions/User" 
    put:
      tags:
      - Users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateActualUser
      consumes:
        - multipart/form-data
      parameters:
        - name: email
          in: formData
          description: The users's email
          required: true
          type: string
        - name: password
          in: formData
          description: The users's password
          required: true
          type: string
          format: password
        - name: firstName
          in: formData
          description: The users's firstname
          required: false
          type: string
        - name: lastName
          in: formData
          description: The users's lastname
          required: false
          type: string         
      responses:
        "204":
          description: Successful operation
        "404":
          description: User not found
        "400":
          description: Invalid id supplied
   
  /users/{userId}:
    parameters:
      - $ref: '#/parameters/userId'
      
    get:
      tags:
        - Users
      description: Get basic information about an user.
      operationId: getUser
      responses:
        "200":
          description: The user object
          schema:
            $ref: "#/definitions/User"
    put:
      security:
        - Bearer: []
      tags:
        - Users
      summary: Update a certain user
      description: This can only be done by the logged in user.
      operationId: updateUser
      consumes:
        - multipart/form-data
      parameters:
        - name: email
          in: formData
          description: The users's email
          required: true
          type: string
        - name: password
          in: formData
          description: The users's password
          required: true
          type: string
          format: password
        - name: firstName
          in: formData
          description: The users's firstname
          required: false
          type: string
        - name: lastName
          in: formData
          description: The users's lastname
          required: false
          type: string         
      responses:
        "204":
          description: Successful operation
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/ErrorMessage"
        "400":
          description: Invalid id supplied
          schema:
            $ref: "#/definitions/ErrorMessage"

    delete:
      security:
        - Bearer: []
      tags:
        - Users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json        
      responses:
        "204":
          description: Successful operation
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/ErrorMessage"
        "400":
          description: Invalid id supplied
          schema:
            $ref: "#/definitions/ErrorMessage"
