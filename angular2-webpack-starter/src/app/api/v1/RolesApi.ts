/**
 * TestManagement Studio Backend API
 * <<Some text >>   Would respond with: ```js callbackFunction({     ... }); ``` 
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class RolesApi {
    protected basePath = 'http://localhost/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Add a new role
     * 
     * @param name Name of the role
     * @param accessToActors 
     * @param accessToCategories 
     * @param accessTests 
     */
    public addRole(name: string, accessToActors: number, accessToCategories: number, accessTests: number, extraHttpRequestParams?: any): Observable<string> {
        return this.addRoleWithHttpInfo(name, accessToActors, accessToCategories, accessTests, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a role
     * 
     * @param roleId The role identifier number
     */
    public getRole(roleId: number, extraHttpRequestParams?: any): Observable<Array<models.User>> {
        return this.getRoleWithHttpInfo(roleId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get all roles in the system
     * 
     */
    public listRoles(extraHttpRequestParams?: any): Observable<Array<models.Role>> {
        return this.listRolesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update a role
     * 
     * @param roleId The role identifier number
     * @param name Name of the role
     * @param accessToActors 
     * @param accessToCategories 
     * @param accessTests 
     */
    public updateRole(roleId: number, name: string, accessToActors: number, accessToCategories: number, accessTests: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.updateRoleWithHttpInfo(roleId, name, accessToActors, accessToCategories, accessTests, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Add a new role
     * 
     * @param name Name of the role
     * @param accessToActors 
     * @param accessToCategories 
     * @param accessTests 
     */
    public addRoleWithHttpInfo(name: string, accessToActors: number, accessToCategories: number, accessTests: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/roles`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling addRole.');
        }
        // verify required parameter 'accessToActors' is not null or undefined
        if (accessToActors === null || accessToActors === undefined) {
            throw new Error('Required parameter accessToActors was null or undefined when calling addRole.');
        }
        // verify required parameter 'accessToCategories' is not null or undefined
        if (accessToCategories === null || accessToCategories === undefined) {
            throw new Error('Required parameter accessToCategories was null or undefined when calling addRole.');
        }
        // verify required parameter 'accessTests' is not null or undefined
        if (accessTests === null || accessTests === undefined) {
            throw new Error('Required parameter accessTests was null or undefined when calling addRole.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (name !== undefined) {
            formParams.set('name', <any>name);
        }

        if (accessToActors !== undefined) {
            formParams.set('accessToActors', <any>accessToActors);
        }

        if (accessToCategories !== undefined) {
            formParams.set('accessToCategories', <any>accessToCategories);
        }

        if (accessTests !== undefined) {
            formParams.set('accessTests', <any>accessTests);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a role
     * 
     * @param roleId The role identifier number
     */
    public getRoleWithHttpInfo(roleId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/roles/${roleId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'roleId' is not null or undefined
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling getRole.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded', 
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get all roles in the system
     * 
     */
    public listRolesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/roles`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded', 
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update a role
     * 
     * @param roleId The role identifier number
     * @param name Name of the role
     * @param accessToActors 
     * @param accessToCategories 
     * @param accessTests 
     */
    public updateRoleWithHttpInfo(roleId: number, name: string, accessToActors: number, accessToCategories: number, accessTests: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/roles/${roleId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'roleId' is not null or undefined
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling updateRole.');
        }
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling updateRole.');
        }
        // verify required parameter 'accessToActors' is not null or undefined
        if (accessToActors === null || accessToActors === undefined) {
            throw new Error('Required parameter accessToActors was null or undefined when calling updateRole.');
        }
        // verify required parameter 'accessToCategories' is not null or undefined
        if (accessToCategories === null || accessToCategories === undefined) {
            throw new Error('Required parameter accessToCategories was null or undefined when calling updateRole.');
        }
        // verify required parameter 'accessTests' is not null or undefined
        if (accessTests === null || accessTests === undefined) {
            throw new Error('Required parameter accessTests was null or undefined when calling updateRole.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded', 
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (name !== undefined) {
            formParams.set('name', <any>name);
        }

        if (accessToActors !== undefined) {
            formParams.set('accessToActors', <any>accessToActors);
        }

        if (accessToCategories !== undefined) {
            formParams.set('accessToCategories', <any>accessToCategories);
        }

        if (accessTests !== undefined) {
            formParams.set('accessTests', <any>accessTests);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
