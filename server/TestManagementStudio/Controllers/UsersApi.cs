/*
 * TestManagement Studio Backend API
 *
 * <<Some text >>   Would respond with: ```js callbackFunction({     ... }); ``` 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.SwaggerGen;
using TestManagementStudio.ViewModels;

namespace TestManagementStudio.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class UsersApiController : Controller
    { 

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Register a new user</remarks>
        /// <param name="email">The users&#39;s email</param>
        /// <param name="password">The users&#39;s password</param>
        /// <param name="firstName">The users&#39;s firstname</param>
        /// <param name="lastName">The users&#39;s lastname</param>
        /// <response code="201">Return no content, but a redirection  header</response>
        /// <response code="409">Some unique data (i.e. email address) conflicted with a data of existing user</response>
        [HttpPost]
        [Route("/v1/users")]
        [Swashbuckle.AspNetCore.SwaggerGen.SwaggerOperation("AddUser")]
        [SwaggerResponse(200, type: typeof(string))]
        public virtual IActionResult AddUser([FromForm]string email, [FromForm]string password, [FromForm]string firstName, [FromForm]string lastName)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="userId">The user identifier number</param>
        /// <response code="204">Successful operation</response>
        /// <response code="400">Invalid id supplied</response>
        /// <response code="404">User not found</response>
        [HttpDelete]
        [Route("/v1/users/{userId}")]
        [SwaggerOperation("DeleteUser")]
        public virtual void DeleteUser([FromRoute]decimal? userId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Get the actual user
        /// </summary>
        /// <remarks></remarks>
        /// <response code="200">The user object</response>
        [HttpGet]
        [Route("/v1/users/me")]
        [Swashbuckle.AspNetCore.SwaggerGen.SwaggerOperation("GetActualUser")]
        [SwaggerResponse(200, type: typeof(User))]
        
        public virtual IActionResult GetActualUser()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get basic information about an user.</remarks>
        /// <param name="userId">The user identifier number</param>
        /// <response code="200">The user object</response>
        [HttpGet]
        [Route("/v1/users/{userId}")]
        [SwaggerOperation("GetUser")]
        [SwaggerResponse(200, type: typeof(User))]
        public virtual IActionResult GetUser([FromRoute]decimal? userId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get all registered users</remarks>
        /// <response code="200">The list of user objects</response>
        [HttpGet]
        [Route("/v1/users")]
        [SwaggerOperation("ListUsers")]
        [SwaggerResponse(200, type: typeof(List<User>))]
        public virtual IActionResult ListUsers()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
            : default(List<User>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="email">The users&#39;s email</param>
        /// <param name="password">The users&#39;s password</param>
        /// <param name="firstName">The users&#39;s firstname</param>
        /// <param name="lastName">The users&#39;s lastname</param>
        /// <response code="204">Successful operation</response>
        /// <response code="400">Invalid id supplied</response>
        /// <response code="404">User not found</response>
        [HttpPut]
        [Route("/v1/users/me")]
        [SwaggerOperation("UpdateActualUser")]
        public virtual void UpdateActualUser([FromForm]string email, [FromForm]string password, [FromForm]string firstName, [FromForm]string lastName)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Update a certain user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="userId">The user identifier number</param>
        /// <param name="email">The users&#39;s email</param>
        /// <param name="password">The users&#39;s password</param>
        /// <param name="firstName">The users&#39;s firstname</param>
        /// <param name="lastName">The users&#39;s lastname</param>
        /// <response code="204">Successful operation</response>
        /// <response code="400">Invalid id supplied</response>
        /// <response code="404">User not found</response>
        [HttpPut]
        [Route("/v1/users/{userId}")]
        [SwaggerOperation("UpdateUser")]
        public virtual void UpdateUser([FromRoute]decimal? userId, [FromForm]string email, [FromForm]string password, [FromForm]string firstName, [FromForm]string lastName)
        { 
            throw new NotImplementedException();
        }
    }
}
